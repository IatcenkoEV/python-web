>>>def f(x):
    return x*x

>>>alist = [1, 5, 6]
>>>list(map(f, alist) # Передача всех значений через map
[1, 25, 36]
# -------------------------------------------------------
>>>def f1(x, y, z=1):
    return (x + y)**z

>>>f1(4,5)
9
>>>f1(4,5,6)
531441
# -------------------------------------------------------
Передача массивов в функцию
>>>a = [1, 2, 3]
>>>f1(a)
f1() missing 1 required positional argument
>>>f1(*a) # Передача всех элементов массива в функцию
27
# -------------------------------------------------------
>>>def f1(x):
    return x**2

>>>def f2(*args): #Функция с неограниченным количеством аргументов
    return list(map(f1,args) # применяем f1 для каждого аргумента

>>>f2(1,2)
[1, 4]
>>>f2(4, 5, 6, 7, 8)
[16, 25, 36, 49, 64]
>>>a = [1, 2, 3, 4]
>>>f2(*a)
[1, 4, 9, 16]
# -------------------------------------------------------
>>>def f4(**kwargs): # Принимаем словарь на входе и парсим его
    for index, val in enumerate(kwargs.items()):
        print(index, val)

>>>f4(a = 'aa', b = 'bb', c = 'cc')
0 ('b', 'bb')
1 ('a', 'aa')
2 ('c', 'cc')
# -------------------------------------------------------
# Передача и по списку и по ключу
>>>def f6(*args, **kwargs):
    print('args', args)
    print('kwargs', kwargs)

>>>f6(1, 3, 4, a = '3', b = 7)
args (1, 3, 4)
kwargs {'b': 7, 'a' = '3'}
#Правило передачи в фукнция значений массива и словаря
>>>a = [1, 2, 3]
>>>b = {'a': 'aa', 'b': 'bb'}
>>>f6(*a, **b)
# -------------------------------------------------------
>>>f7 = f6 #Передача присваивание операций одной функции к другой
#Использование списка функций
>>>def plus(x, y):
    return x + y
>>>def minus(x, y):
    return x - y

>>>adef = [plus, minus]
>>>adef[0](1,2) # Вызов первого элемента массива функций
3

#Использование словарей функций
>>>adicdef = {'+': plus, '-': minus}
>>>adicdef['+'](2,4)
6
# -------------------------------------------------------
# Вложенные функции
>>> def func(x, y):
        def plus(x, y):
            return x + y
        def minus(x, y):
            return x - y
        if x > y:
            return minus(x, y)
        else:
            return plus(x, y)

>>>func(1, 2)
3
>>>func(2, 1)
1





















